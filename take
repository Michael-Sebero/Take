#!/bin/sh

set -e

SCRIPT_VERSION="1.0.0"
SCRIPT_NAME="take"

AUR_BASE_URL="https://aur.archlinux.org"
BUILD_DIR="${BUILD_DIR:-/tmp/aur-build-$$}"

if [ -t 1 ]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    BOLD='\033[1m'
    NC='\033[0m'
else
    RED='' GREEN='' YELLOW='' BLUE='' PURPLE='' CYAN='' BOLD='' NC=''
fi

CLEAN_BUILD=false
SKIP_DEPS=true
FORCE_INSTALL=false
SEARCH_MODE=false
INFO_MODE=false
QUIET=false
VERBOSE=false
FAST_MODE=true

show_usage() {
    cat << EOF
$SCRIPT_NAME $SCRIPT_VERSION

USAGE:
    $SCRIPT_NAME [OPTIONS] <packages...>
    $SCRIPT_NAME [OPTIONS] -S <packages...>    # Install packages
    $SCRIPT_NAME [OPTIONS] -Ss <query>         # Search packages
    $SCRIPT_NAME [OPTIONS] -Si <packages...>   # Show package info

OPTIONS:
    -S, --sync              Install packages (default)
    -Ss, --search           Search for packages
    -Si, --info             Show package information
    -c, --clean             Clean build directory before building
    -f, --force             Force installation (overwrite files)
    --fast                  Maximum speed mode (skip all checks)
    -q, --quiet             Reduce output
    -v, --verbose           Increase output
    -h, --help              Show this help message
    --version               Show version information

EXAMPLES:
    $SCRIPT_NAME wine-cachyos                  # Install wine-cachyos
    $SCRIPT_NAME -c wine-cachyos               # Clean build and install
    $SCRIPT_NAME -Ss wine                      # Search for wine packages
    $SCRIPT_NAME -Si wine-cachyos              # Show package info
EOF
}

log_info() {
    if [ "$QUIET" != "true" ]; then
        printf "${BLUE}::${NC} %s\n" "$1"
    fi
}

log_success() {
    if [ "$QUIET" != "true" ]; then
        printf "${GREEN}::${NC} %s\n" "$1"
    fi
}

log_warning() {
    printf "${YELLOW}:: WARNING:${NC} %s\n" "$1" >&2
}

log_error() {
    printf "${RED}:: ERROR:${NC} %s\n" "$1" >&2
}

log_debug() {
    if [ "$VERBOSE" = "true" ]; then
        printf "${CYAN}:: DEBUG:${NC} %s\n" "$1" >&2
    fi
}

detect_privilege_escalation() {
    if command -v doas >/dev/null 2>&1; then
        echo "doas"
    elif command -v sudo >/dev/null 2>&1; then
        echo "sudo"
    else
        log_error "Neither sudo nor doas found. Please install one of them."
        exit 1
    fi
}

PRIV_ESC=$(detect_privilege_escalation)
log_debug "Using privilege escalation: $PRIV_ESC"

run_as_root() {
    if [ "$(id -u)" -eq 0 ]; then
        "$@"
    else
        case "$PRIV_ESC" in
            "doas")
                doas "$@"
                ;;
            "sudo")
                sudo "$@"
                ;;
        esac
    fi
}

find_build_user() {
    local build_user
    if [ "$(id -u)" -eq 0 ]; then
        # Check for SUDO_USER first (from sudo)
        if [ -n "$SUDO_USER" ] && [ "$SUDO_USER" != "root" ]; then
            echo "$SUDO_USER"
            return
        fi
        # Check for the user who called su (from $USER or logname)
        if [ -n "$USER" ] && [ "$USER" != "root" ]; then
            echo "$USER"
            return
        fi
        # Try logname as fallback
        if command -v logname >/dev/null 2>&1; then
            build_user=$(logname 2>/dev/null || true)
            if [ -n "$build_user" ] && [ "$build_user" != "root" ]; then
                echo "$build_user"
                return
            fi
        fi
        # Find first regular user as final fallback
        build_user=$(getent passwd | awk -F: '$3 >= 1000 && $3 < 65534 && $7 !~ /nologin|false/ { print $1; exit }')
        if [ -n "$build_user" ]; then
            echo "$build_user"
        else
            echo "nobody"
        fi
    else
        echo "$USER"
    fi
}

BUILD_USER=$(find_build_user)
log_debug "Build user: $BUILD_USER"

url_encode() {
    printf '%s\n' "$1" | sed 's/ /%20/g;s/+/%2B/g;s/&/%26/g'
}

search_aur() {
    local query="$1"
    local encoded_query=$(url_encode "$query")
    local url="https://aur.archlinux.org/rpc/?v=5&type=search&arg=$encoded_query"
    
    log_info "Searching AUR for: $query"
    local results=$(curl -s "$url")
    
    if ! echo "$results" | grep -q '"resultcount":[1-9]'; then
        log_warning "No packages found matching: $query"
        return 1
    fi
    
    if command -v jq >/dev/null 2>&1; then
        echo "$results" | jq -r '.results[] | "\(.Name) \(.Version)\n    \(.Description)"' 2>/dev/null || {
            log_error "Failed to parse search results. Is jq installed?"
            return 1
        }
    else
        echo "$results" | sed 's/.*"Name":"\([^"]*\)".*"Version":"\([^"]*\)".*"Description":"\([^"]*\)".*/\1 \2\n    \3/g'
    fi
}

show_package_info() {
    local package="$1"
    local encoded_package=$(url_encode "$package")
    local url="https://aur.archlinux.org/rpc/?v=5&type=info&arg=$encoded_package"
    
    local info=$(curl -s "$url")
    
    if ! echo "$info" | grep -q '"resultcount":1'; then
        log_error "Package '$package' not found in AUR"
        return 1
    fi
    
    if command -v jq >/dev/null 2>&1; then
        echo "$info" | jq -r '
            .results[0] | 
            "Repository      : aur",
            "Name            : \(.Name)",
            "Version         : \(.Version)",
            "Description     : \(.Description // "None")",
            "URL             : \(.URL // "None")",
            "Maintainer      : \(.Maintainer // "Orphaned")",
            "Votes           : \(.NumVotes)",
            "Popularity      : \(.Popularity)"
        ' 2>/dev/null || {
            log_error "Failed to parse package info. Is jq installed?"
            return 1
        }
    else
        echo "$info" | sed -n 's/.*"Name":"\([^"]*\)".*/Name: \1/p'
        echo "$info" | sed -n 's/.*"Version":"\([^"]*\)".*/Version: \1/p'
        echo "$info" | sed -n 's/.*"Description":"\([^"]*\)".*/Description: \1/p'
    fi
}

package_exists_in_aur() {
    local package="$1"
    local encoded_package=$(url_encode "$package")
    local url="https://aur.archlinux.org/rpc/?v=5&type=info&arg=$encoded_package"
    
    local info=$(curl -s "$url" 2>/dev/null)
    echo "$info" | grep -q '"resultcount":1'
}

get_aur_dependencies() {
    local package="$1"
    local encoded_package=$(url_encode "$package")
    local url="https://aur.archlinux.org/rpc/?v=5&type=info&arg=$encoded_package"
    
    local info=$(curl -s "$url" 2>/dev/null)
    if command -v jq >/dev/null 2>&1; then
        echo "$info" | jq -r '.results[0].Depends[]? // empty, .results[0].MakeDepends[]? // empty' 2>/dev/null | \
        sed 's/[<>=].*//' | sort -u
    else
        echo "$info" | sed -n 's/.*"Depends":\[\([^]]*\)\].*/\1/p;s/.*"MakeDepends":\[\([^]]*\)\].*/\1/p' | \
        tr ',' '\n' | sed 's/"//g;s/[<>=].*//;/^$/d' | sort -u
    fi
}

install_dependencies() {
    local package="$1"
    local deps=$(get_aur_dependencies "$package")
    
    if [ -z "$deps" ]; then
        return 0
    fi
    
    local repo_deps=""
    local aur_deps=""
    
    for dep in $deps; do
        if pacman -Si "$dep" >/dev/null 2>&1; then
            repo_deps="$repo_deps $dep"
        elif package_exists_in_aur "$dep"; then
            aur_deps="$aur_deps $dep"
        fi
    done
    
    if [ -n "$repo_deps" ]; then
        log_info "Installing repository dependencies:$repo_deps"
        if ! run_as_root pacman -S --noconfirm --needed --asdeps $repo_deps; then
            log_warning "Failed to install some repository dependencies"
        fi
    fi
    
    if [ -n "$aur_deps" ]; then
        log_info "Installing AUR dependencies:$aur_deps"
        for aur_dep in $aur_deps; do
            if ! build_and_install_package "$aur_dep"; then
                log_warning "Failed to install AUR dependency: $aur_dep"
            fi
        done
    fi
}

build_and_install_package() {
    local package="$1"
    local temp_dir="$BUILD_DIR/$package"
    
    log_info "Processing package: $package"
    
    if ! package_exists_in_aur "$package"; then
        log_error "Package '$package' not found in AUR"
        return 1
    fi
    
    if [ "$CLEAN_BUILD" = "true" ] && [ -d "$temp_dir" ]; then
        rm -rf "$temp_dir"
    fi
    
    # Create temp directory with proper ownership from the start
    if [ "$(id -u)" -eq 0 ] && [ "$BUILD_USER" != "root" ]; then
        local build_group=$(id -gn "$BUILD_USER" 2>/dev/null || echo "users")
        mkdir -p "$temp_dir"
        chown "$BUILD_USER:$build_group" "$temp_dir" 2>/dev/null || true
        chmod 755 "$temp_dir" 2>/dev/null || true
        # Also ensure parent directories are accessible
        chmod 755 "$BUILD_DIR" 2>/dev/null || true
    else
        mkdir -p "$temp_dir"
    fi
    cd "$temp_dir"
    
    cleanup_package() {
        if [ -d "$temp_dir" ]; then
            rm -rf "$temp_dir" 2>/dev/null || true
        fi
    }
    
    log_info "Cloning AUR repository for $package..."
    local aur_url="$AUR_BASE_URL/${package}.git"
    
    if ! git clone --depth=1 "$aur_url" . 2>/dev/null; then
        log_error "Failed to clone repository for package '$package'"
        cleanup_package
        return 1
    fi
    
    # Ensure all cloned files have correct ownership
    if [ "$(id -u)" -eq 0 ] && [ "$BUILD_USER" != "root" ]; then
        local build_group=$(id -gn "$BUILD_USER" 2>/dev/null || echo "users")
        chown -R "$BUILD_USER:$build_group" "$temp_dir" 2>/dev/null || true
        chmod -R u+w "$temp_dir" 2>/dev/null || true
    fi
    
    if [ "$SKIP_DEPS" != "true" ]; then
        install_dependencies "$package"
    fi
    
    if [ "$(id -u)" -eq 0 ] && [ "$BUILD_USER" != "root" ]; then
        chown -R "$BUILD_USER:$(id -gn "$BUILD_USER")" "$temp_dir" 2>/dev/null || true
    fi
    
    log_info "Building package $package..."
    
    local makepkg_args="--noconfirm --needed"
    
    if [ "$FAST_MODE" = "true" ]; then
        makepkg_args="$makepkg_args --skipinteg --nocheck --skippgpcheck"
    fi
    
    local build_cmd
    if [ "$(id -u)" -eq 0 ] && [ "$BUILD_USER" != "root" ]; then
        # Ensure build user home directory exists and is accessible
        local user_home=$(getent passwd "$BUILD_USER" | cut -d: -f6)
        if [ -n "$user_home" ] && [ -d "$user_home" ]; then
            # Use su with clean environment to run makepkg as the build user
            build_cmd="su - $BUILD_USER -c 'cd \"$temp_dir\" && makepkg $makepkg_args'"
        elif command -v runuser >/dev/null 2>&1; then
            build_cmd="runuser -u $BUILD_USER -- makepkg $makepkg_args"
        else
            build_cmd="makepkg $makepkg_args --asroot"
        fi
    else
        build_cmd="makepkg $makepkg_args"
    fi
    
    log_debug "Build command: $build_cmd"
    
    if [ "$VERBOSE" = "true" ]; then
        if ! eval "$build_cmd"; then
            log_error "Failed to build package $package"
            cleanup_package
            return 1
        fi
    else
        if ! eval "$build_cmd" >/dev/null 2>&1; then
            log_error "Failed to build package $package"
            log_info "Try running with -v for more verbose output"
            cleanup_package
            return 1
        fi
    fi
    
    local package_file=$(find . -name "*.pkg.tar.*" -type f | head -1)
    
    if [ -z "$package_file" ]; then
        log_error "No package file found after building $package"
        cleanup_package
        return 1
    fi
    
    log_info "Installing package $package..."
    
    local pacman_args="--noconfirm --needed"
    if [ "$FORCE_INSTALL" = "true" ]; then
        pacman_args="$pacman_args --force"
    fi
    
    if ! run_as_root pacman -U $pacman_args "$package_file"; then
        log_error "Failed to install package $package"
        cleanup_package
        return 1
    fi
    
    log_success "Package $package installed successfully"
    cleanup_package
    return 0
}

parse_arguments() {
    while [ $# -gt 0 ]; do
        case "$1" in
            -S|--sync)
                shift
                ;;
            -Ss|--search)
                SEARCH_MODE=true
                shift
                ;;
            -Si|--info)
                INFO_MODE=true
                shift
                ;;
            -c|--clean)
                CLEAN_BUILD=true
                shift
                ;;
            -f|--force)
                FORCE_INSTALL=true
                shift
                ;;
            --fast)
                FAST_MODE=true
                SKIP_DEPS=true
                shift
                ;;
            -q|--quiet)
                QUIET=true
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            --version)
                echo "$SCRIPT_NAME $SCRIPT_VERSION"
                exit 0
                ;;
            --)
                shift
                break
                ;;
            -*)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
            *)
                break
                ;;
        esac
    done
    
    PACKAGES="$*"
}

main() {
    # Create build directory with proper permissions
    if [ "$(id -u)" -eq 0 ] && [ "$BUILD_USER" != "root" ]; then
        mkdir -p "$BUILD_DIR"
        local build_group=$(id -gn "$BUILD_USER" 2>/dev/null || echo "users")
        chown "$BUILD_USER:$build_group" "$BUILD_DIR" 2>/dev/null || true
        chmod 755 "$BUILD_DIR" 2>/dev/null || true
    else
        mkdir -p "$BUILD_DIR"
    fi
    
    parse_arguments "$@"
    
    if [ "$SEARCH_MODE" = "true" ]; then
        for query in $PACKAGES; do
            search_aur "$query"
        done
        exit 0
    fi
    
    if [ "$INFO_MODE" = "true" ]; then
        for package in $PACKAGES; do
            show_package_info "$package"
            echo
        done
        exit 0
    fi
    
    if [ -z "$PACKAGES" ]; then
        log_error "No packages specified"
        show_usage
        exit 1
    fi
    
    local successful_packages=""
    local failed_packages=""
    local package_count=0
    
    for package in $PACKAGES; do
        package_count=$((package_count + 1))
    done
    
    log_info "Installing $package_count AUR package(s)..."
    
    for package in $PACKAGES; do
        if build_and_install_package "$package"; then
            successful_packages="$successful_packages $package"
        else
            failed_packages="$failed_packages $package"
        fi
    done
    
    if [ -n "$successful_packages" ]; then
        log_success "Successfully installed:$successful_packages"
    fi
    
    if [ -n "$failed_packages" ]; then
        log_error "Failed to install:$failed_packages"
        exit 1
    fi
    
    log_success "All packages installed successfully!"
}

check_dependencies() {
    if [ "$FAST_MODE" = "true" ]; then
        return 0
    fi
    
    local missing_deps=""
    
    if ! command -v git >/dev/null 2>&1; then
        missing_deps="$missing_deps git"
    fi
    
    if [ -n "$missing_deps" ]; then
        log_error "Missing required dependencies:$missing_deps"
        log_info "Please install them with: pacman -S$missing_deps"
        exit 1
    fi
}

if [ "${0##*/}" = "take" ]; then
    check_dependencies
    main "$@"
fi
